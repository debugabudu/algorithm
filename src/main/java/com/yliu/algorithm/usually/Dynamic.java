package com.yliu.algorithm.usually;

/**
 * 动态规划
 */
public class Dynamic {
    /**
     * ①基本思想：基本思想与分治法类似，将待求解的问题分解为若干个子问题（阶段），按顺序求解子阶段，前一子问题的解，为后一子问题的求解提供了有用的信息。
     * 在求解任一子问题时，列出各种可能的局部解，通过决策保留那些有可能达到最优的局部解，丢弃其他局部解。依次解决各子问题，最后一个子问题就是初始问题的解。
     * ②适用情况：
     * 能采用动态规划求解的问题的一般要具有3个性质：
     * (1) 最优化原理：如果问题的最优解所包含的子问题的解也是最优的，就称该问题具有最优子结构，即满足最优化原理。
     * (2) 无后效性：即某阶段状态一旦确定，就不受这个状态以后决策的影响。也就是说，某状态以后的过程不会影响以前的状态，只与当前状态有关。
     * (3)有重叠子问题：即子问题之间是不独立的，一个子问题在下一阶段决策中可能被多次使用到。（该性质并不是动态规划适用的必要条件，但是如果没有这条性质，动态规划算法同其他算法相比就不具备优势）
     * ③基本求解步骤：
     * 初始状态→│决策１│→│决策２│→…→│决策ｎ│→结束状态
     * (1)划分阶段：按照问题的时间或空间特征，把问题分为若干个阶段。在划分阶段时，注意划分后的阶段一定要是有序的或者是可排序的，否则问题就无法求解。
     * (2)确定状态和状态变量：将问题发展到各个阶段时所处于的各种客观情况用不同的状态表示出来。当然，状态的选择要满足无后效性。
     * (3)确定决策并写出状态转移方程：因为决策和状态转移有着天然的联系，状态转移就是根据上一阶段的状态和决策来导出本阶段的状态。
     * 所以如果确定了决策，状态转移方程也就可写出。但事实上常常是反过来做，根据相邻两个阶段的状态之间的关系来确定决策方法和状态转移方程。
     * (4)寻找边界条件：给出的状态转移方程是一个递推式，需要一个递推的终止条件或边界条件。
     * 一般，只要解决问题的阶段、状态和状态转移决策确定了，就可以写出状态转移方程（包括边界条件）。
     * *实际应用中可以按以下几个简化的步骤进行设计：*
     * （1）分析最优解的性质，并刻画其结构特征。
     * （2）递归的定义最优解。
     * （3）以自底向上或自顶向下的记忆化方式（备忘录法）计算出最优值
     * （4）根据计算最优值时得到的信息，构造问题的最优解
     * ④算法实现：
     * 三要素：（1）问题的阶段（2）每个阶段的状态（3）从前一个阶段转化到后一个阶段之间的递推关系。
     */


}
